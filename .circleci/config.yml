# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
orbs:
  android: circleci/android@1.0.3

# References are blocks of configurations that we can reference and reuse.
references:

  # Workspaces represent the spaces we work on & are useful for sharing data between jobs.
  # Create a workspace with the ~/code directory.
  workspace: &workspace
               ~/elemento

  # Docker Image Configs
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m

  gradle_key: &gradle_key
                jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
      key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  run-lint-tests: &run-lint-tests
    run:
      name: Run Lint Tests
      command: ./gradlew lint test

  run-unit-tests: &run-unit-tests
    run:
      name: Run Unit Test
      command: ./gradlew testDevDebugUnitTest

  store-artifacts: &store-artifacts
    store_artifacts:
      path: app/build/reports
      destination: reports

  store-test-results: &store-test-results
    store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      path: app/build/test-results

  install-fastlane: &install-fastlane
    run:
      name: Install fastlane
      command: bundle update

  install-firebase-plugin: &install-firebase-plugin
    run:
      name: Install Firebase Plugin
      command: fastlane add_plugin firebase_app_distribution

  install-firebase-tools: &install-firebase-tools
    run:
      name: Install firebase Tools
      command: curl -sL firebase.tools | bash

  deploy-firebase-build: &deploy-firebase-build
    run:
      name: Deploy build to Firebase App Distribution
      command: bundle exec fastlane $FASTLANE_LANE
      no_output_timeout: 60m

  deploy-beta-build: &deploy-beta-build
    run:
      name: Deploy build to Playstore beta channel
      command: bundle exec fastlane beta
      no_output_timeout: 60m


jobs:

  ## Run unit tests
  unit-test-branches:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache
      #- *run-unit-tests
      #- *run-lint-tests
      #- *run-sonrqube
      #- *store-artifacts
      #- *store-test-results

  deploy-internal:
    environment:
      FASTLANE_LANE: internal
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache
      - *install-fastlane
      - *deploy-beta-build
#      - *install-firebase-plugin
#      - *install-firebase-tools
#      - *deploy-firebase-build

  deploy-prod:
    environment:
      FASTLANE_LANE: prod
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache
#      - *install-fastlane
#      - *install-firebase-plugin
#      - *install-firebase-tools
      #- *deploy-firebase-build

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  version: 2
  unit-test-for-feature-branches:
    jobs:
      - unit-test-branches:
          filters:
            branches:
              ignore:
                - develop
                - master
  deploy-build-to-beta:
    jobs:
      - deploy-internal:
          filters:
            branches:
              only: develop
      - deploy-prod:
          filters:
            branches:
              only: master